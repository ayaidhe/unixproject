#!/bin/bash

# Define variables
backup_dir=".backup"
backup_config="backup_config.json"

# Function to initialize the backup directory and create/update the configuration file
initialize_backup_dir() {
    mkdir -p "$backup_dir"
    echo "Répertoire de sauvegarde initialisé."

    # Check if the configuration file exists
    if [ ! -f "$backup_dir/$backup_config" ]; then
        # If the configuration file doesn't exist, prompt user to provide project name and preferred compression
        read -p "Nom du projet : " project_name
        read -p "Type de compression préféré (zip, tar, rar) : " preferred_compression
        
        # Create initial configuration
        config='{
    "project_name": "'$project_name'",
    "preferred_compression": "'$preferred_compression'",
    "saved_files": [],
    "logs": {}
}'
        echo "$config" > "$backup_dir/$backup_config"
        echo "Fichier de configuration créé."
    else
        echo "Le répertoire de sauvegarde est déjà initialisé."
    fi
}

# Function to perform immediate backup
perform_immediate_backup() {
    echo "Sauvegarde immédiate en cours..."
    destination="$backup_dir"
    mkdir -p "$destination"
    cp -r "${@:2}" "$destination"
    echo "Sauvegarde immédiate terminée."

    # Update configuration file with saved files
    jq --argjson new_files '["'${@:2}'"]' \
    '.saved_files += $new_files' "$backup_dir/$backup_config" > "$backup_dir/tmp.json" && mv "$backup_dir/tmp.json" "$backup_dir/$backup_config"
    
    # Log the time of each saved file
    for file in "${@:2}"; do
        timestamp=$(date +"%Y-%m-%d %H:%M:%S")
        jq --arg time "$timestamp" \
        --arg file "$file" \
        '.logs[$file] = $time' "$backup_dir/$backup_config" > "$backup_dir/tmp.json" && mv "$backup_dir/tmp.json" "$backup_dir/$backup_config"
    done

    echo "Sauvegarde enregistrée dans le fichier de configuration."
}

# Function to schedule backup
schedule_backup() {
    echo "Sauvegarde planifiée."
    frequency="$1"
    script_path=$(realpath "$0")
    echo "$frequency $script_path sauvegarde_immediate" | crontab -
    echo "Sauvegarde planifiée avec succès pour la fréquence : $frequency."
}

# Function to restore files and folders to the initial directory
restore_files() {
    echo "Restauration des fichiers et dossiers..."

    for file in "${@:2}"; do
        if [ -e "$backup_dir/$file" ]; then
            cp -r "$backup_dir/$file" .
            echo "$file restauré avec succès."
        else
            echo "$file n'existe pas dans la sauvegarde."
        fi
    done

    echo "Restauration terminée."
}

# Function to display the help message
display_help() {
    echo "Utilisation : ./backupapp [options]"
    echo "Options :"
    echo "  -s [fichiers/répertoires]   Effectuer une sauvegarde immédiate"
    echo "  init                        Initialiser le répertoire de sauvegarde"
    echo "  -p [fréquence]              Planifier une sauvegarde en utilisant la syntaxe cron"
    echo "  -b [fichiers/répertoires]   Restaurer des fichiers et dossiers"
    echo "  -h, --help                  Afficher ce message d'aide"
}

# Main function
main() {
    case $1 in
        "-s")
            if [ "$2" == "." ]; then
                perform_immediate_backup "$backup_dir" *
            else
                perform_immediate_backup "$backup_dir" "${@:2}"
            fi
            ;;
        "init")
            initialize_backup_dir
            ;;
        "-p")
            schedule_backup "$2"
            ;;
        "-b")
            restore_files "${@:2}"
            ;;
        "-h" | "--help")
            display_help
            ;;
        *)
            echo "Erreur : Option invalide. Utilisez '-h' ou '--help' pour obtenir des instructions d'utilisation."
            ;;
    esac
}

# Exécuter la fonction principale avec les paramètres de ligne de commande
main "$@"
